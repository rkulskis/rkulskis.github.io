#!/usr/bin/env bash
set -e

show_usage() {
  cat <<EOF

facio - Project-wide utility script for managing development, builds,
        and deployment for PhilsAxioms full-stack app.

Usage:
  ./facio <command> [options]

Commands:
  dev                 Run backend (Node.js) and frontend (Vite) in dynamic
                      development mode with hot-reloading and live preview.

  static [--rebuild]  Serve backend with static frontend. If '--rebuild' is
                      passed, the frontend is rebuilt before serving.

  test                Run all tests (frontend and backend)

  build               Build all packages for production

  validate            Validate YAML structure and philosophical consistency.
                      Ensures every argument can be activated through valid
                      axiom paths, checks for circular dependencies, and
                      validates logical consistency.

  fix-arguments [--auto-fix]
                      Analyze unreachable arguments and suggest axiom fixes.
                      With --auto-fix, automatically adds necessary axioms
                      and questionnaire items to make all arguments reachable.

  deploy [--gcloud-push]
                      Deploy the app using Google Cloud Run. If
                      '--gcloud-push' is provided, the script will push the
                      Docker image to Artifact Registry before deployment.
                      Also mounts secrets and sets necessary IAM roles.

Examples:
  ./facio dev
  ./facio static --rebuild
  ./facio test
  ./facio build
  ./facio validate
  ./facio fix-arguments
  ./facio fix-arguments --auto-fix
  ./facio deploy --gcloud-push

EOF
  exit 1
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "package.json" ] || [ ! -d "packages" ]; then
  log_error "This script must be run from the PhilsAxioms root directory"
  exit 1
fi

case "${1:-}" in
  "dev")
    log_info "Starting PhilsAxioms in development mode..."
    
    # Build shared package first
    log_info "Building shared package..."
    npm run build --workspace=packages/shared
    
    if command -v concurrently >/dev/null 2>&1; then
      log_info "Starting backend and frontend with concurrently..."
      npx concurrently \
        --names "BACKEND,FRONTEND" \
        --prefix-colors "blue,green" \
        "npm run dev --workspace=packages/backend" \
        "sleep 3 && npm run dev --workspace=packages/frontend"
    else
      log_warn "concurrently not found, installing..."
      npm install concurrently --save-dev
      
      log_info "Starting backend and frontend..."
      npx concurrently \
        --names "BACKEND,FRONTEND" \
        --prefix-colors "blue,green" \
        "npm run dev --workspace=packages/backend" \
        "sleep 3 && npm run dev --workspace=packages/frontend"
    fi
    ;;
    
  "static")
    log_info "Preparing static build..."
    
    # Build shared package
    npm run build --workspace=packages/shared
    
    # Check if rebuild flag is passed
    if [[ "${2:-}" == "--rebuild" ]]; then
      log_info "Rebuilding frontend for static serving..."
      # Build frontend without GitHub Pages base path
      npm run build --workspace=packages/frontend
    fi
    
    # Build backend
    log_info "Building backend..."
    npm run build --workspace=packages/backend
    
    # Serve static frontend with backend
    log_info "Starting backend with static frontend..."
    log_info "Backend API: http://localhost:3001"
    log_info "Frontend: http://localhost:3001 (served statically)"
    
    # Create a simple static server setup
    cd packages/backend
    
    # Copy frontend dist to backend public folder
    mkdir -p public
    if [ -d "../frontend/dist" ]; then
      cp -r ../frontend/dist/* public/
      log_success "Frontend static files copied to backend"
    else
      log_error "Frontend dist folder not found. Run './facio static --rebuild' first."
      exit 1
    fi
    
    # Start backend (assumes it serves static files from public/)
    npm start
    ;;
    
  "test")
    log_info "Running all tests..."
    
    # Build shared package first
    npm run build --workspace=packages/shared
    
    # Install test dependencies if needed
    log_info "Installing test dependencies..."
    npm install
    
    # Run backend tests
    log_info "Running backend tests..."
    npm run test --workspace=packages/backend
    
    # Run frontend tests
    log_info "Running frontend tests..."
    npm run test --workspace=packages/frontend
    
    log_success "All tests completed!"
    ;;
    
  "build")
    log_info "Building all packages for production..."
    
    # Build shared package
    log_info "Building shared package..."
    npm run build --workspace=packages/shared
    
    # Build backend
    log_info "Building backend..."
    npm run build --workspace=packages/backend
    
    # Build frontend
    log_info "Building frontend..."
    npm run build --workspace=packages/frontend
    
    log_success "All packages built successfully!"
    ;;
    
  "validate")
    log_info "Validating YAML structure and philosophical consistency..."
    
    # Run the comprehensive validation
    node scripts/validate-yaml-structure.js
    
    if [ $? -eq 0 ]; then
      log_success "YAML validation passed!"
    else
      log_error "YAML validation failed! Fix the errors before proceeding."
      exit 1
    fi
    ;;
    
  "fix-arguments")
    log_info "Analyzing and fixing unreachable arguments..."
    
    # Check if auto-fix flag is passed
    if [[ "${2:-}" == "--auto-fix" ]]; then
      log_info "Auto-fix mode enabled - will add necessary axioms"
      node scripts/auto-fix-arguments.js --auto-fix
    else
      log_info "Analysis mode - will suggest fixes"
      node scripts/auto-fix-arguments.js
    fi
    
    if [ $? -eq 0 ]; then
      log_success "Argument analysis completed!"
    else
      log_error "Argument analysis found issues that need attention."
      exit 1
    fi
    ;;
    
  "deploy")
    log_info "Deploying PhilsAxioms..."
    
    # Check if gcloud CLI is available
    if ! command -v gcloud >/dev/null 2>&1; then
      log_error "Google Cloud CLI (gcloud) is required for deployment"
      log_info "Install it from: https://cloud.google.com/sdk/docs/install"
      exit 1
    fi
    
    # Build everything first
    ./facio build
    
    # Set up variables (these should be customized for your project)
    PROJECT_ID=${GCLOUD_PROJECT_ID:-"philsaxioms-app"}
    REGION=${GCLOUD_REGION:-"us-central1"}
    SERVICE_NAME="philsaxioms"
    IMAGE_NAME="gcr.io/${PROJECT_ID}/${SERVICE_NAME}"
    
    log_info "Project ID: $PROJECT_ID"
    log_info "Region: $REGION"
    log_info "Service: $SERVICE_NAME"
    
    # Create Dockerfile if it doesn't exist
    if [ ! -f "Dockerfile" ]; then
      log_info "Creating Dockerfile..."
      cat > Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/backend/package*.json ./packages/backend/
COPY packages/frontend/package*.json ./packages/frontend/

# Install dependencies
RUN npm ci --workspace=packages/shared
RUN npm ci --workspace=packages/backend
RUN npm ci --workspace=packages/frontend

# Copy source code
COPY packages/shared/ ./packages/shared/
COPY packages/backend/ ./packages/backend/
COPY packages/frontend/ ./packages/frontend/
COPY data/ ./data/

# Build everything
RUN npm run build --workspace=packages/shared
RUN npm run build --workspace=packages/backend
RUN npm run build --workspace=packages/frontend

# Copy frontend dist to backend public
RUN mkdir -p packages/backend/public
RUN cp -r packages/frontend/dist/* packages/backend/public/

WORKDIR /app/packages/backend

EXPOSE 8080

CMD ["npm", "start"]
EOF
      log_success "Dockerfile created"
    fi
    
    # Build Docker image
    log_info "Building Docker image..."
    docker build -t $IMAGE_NAME .
    
    # Push image if requested
    if [[ "${2:-}" == "--gcloud-push" ]]; then
      log_info "Pushing image to Google Container Registry..."
      docker push $IMAGE_NAME
    fi
    
    # Deploy to Cloud Run
    log_info "Deploying to Cloud Run..."
    gcloud run deploy $SERVICE_NAME \
      --image $IMAGE_NAME \
      --platform managed \
      --region $REGION \
      --allow-unauthenticated \
      --port 8080 \
      --memory 1Gi \
      --cpu 1 \
      --project $PROJECT_ID
    
    log_success "Deployment completed!"
    log_info "Your app should be available at the URL shown above"
    ;;
    
  *)
    show_usage
    ;;
esac
